/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <bits/stdc++.h>

#define all(v) (v).begin(),(v).end()
#define mp make_pair
using namespace std;

class DChristmasTrees {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n, m;
        in >> n >> m;

        vector<int> v(n);
        for (int i = 0; i < n; ++i) in >> v[i];

        sort(all(v));

        queue<pair<int, pair<int, int> >> q;

        q.push(mp(-1, mp(-INT_MAX, v[0] - 1)));

        for (int i = 0; i + 1 < n; ++i) {
            int left = v[i] + 1;
            int right = v[i + 1] - 1;
            if (right >= left)q.push(mp(i, mp(left, right)));
        }
        q.push(mp(-1, mp(v[n - 1] + 1, INT_MAX)));


        long long sum = 0;
        vector<int> ans;
        while (!q.empty() && ans.size() < m) {
            auto cur = q.front();
            q.pop();
            auto cor = cur.second;

            if (cor.first == -INT_MAX) {
                sum += v[0] - cor.second;
                ans.push_back(cor.second);
                q.push(mp(-1, mp(-INT_MAX, cor.second - 1)));
            } else if (cor.second == INT_MAX) {
                sum += cor.first - v[n - 1];
                ans.push_back(cor.first);
                q.push(mp(-1, mp(cor.first + 1, INT_MAX)));
            } else {
                int left = cor.first;
                int right = cor.second;
                int id1 = cur.first;
                int id2 = cur.first + 1;

                if (right < left)continue;

                sum += left - v[id1];
                ans.push_back(left);

                if (ans.size() < m && left != right) {
                    sum += v[id2] - right;
                    ans.push_back(right);
                }
                q.push(mp(id1, mp(left + 1, right - 1)));
            }
        }
        out << sum << '\n';
        for (int e : ans)out << e << ' ';
        out << '\n';
    }
};


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    DChristmasTrees solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}