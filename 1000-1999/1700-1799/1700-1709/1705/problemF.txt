Description:
Mark is administering an online exam consisting of $$$n$$$ true-false questions. However, he has lost all answer keys. He needs a way to retrieve the answers before his client gets infuriated.

Fortunately, he has access to the grading system. Thus, for each query, you can input the answers to all $$$n$$$ questions, and the grading system will output how many of them are correct.

He doesn't have much time, so he can use the grading system at most $$$675$$$ times. Help Mark determine the answer keys.

Note that answer keys are fixed in advance and will not change depending on your queries.

Input Format:
The first line of the input consists of an integer $$$n$$$ ($$$1\leq n\leq 1000$$$) — the number of questions.

Output Format:
None

Note:
The empty lines in the example are just for you to better understand the interaction process. You're not required to print them.

In the first example, there are $$$3$$$ questions, and the answer to each question is 'true', 'true', and 'false', respectively.

- The first query, guessing the answers to be 'false', 'true', and 'true', respectively, guesses only one question — the $$$2$$$-nd question — correctly.
- Then, in the second query, the program correctly guesses the answer key. The interaction ends here.

In the second example, there are $$$4$$$ questions, and the answer to each question is 'true', 'false', 'true', and 'true', respectively.

- The first query guessed none of the questions correctly, resulting in the answer $$$0$$$.
- The second query guessed the $$$1$$$-st, $$$3$$$-rd, and $$$4$$$-th question correctly, resulting in the answer $$$3$$$.
- In the third query, the program correctly guesses the answer key. Then, the interaction ends.