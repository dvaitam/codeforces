Description:
There are some beautiful girls in Arpa’s land as mentioned before.

Once Arpa came up with an obvious problem:

Given an array and a number x, count the number of pairs of indices i, j (1 ≤ i < j ≤ n) such that $$a_i \oplus a_j = x$$, where $$\bigcirc$$ is bitwise xor operation (see notes for explanation).

Immediately, Mehrdad discovered a terrible solution that nobody trusted. Now Arpa needs your help to implement the solution to that problem.

Input Format:
First line contains two integers n and x (1 ≤ n ≤ 105, 0 ≤ x ≤ 105) — the number of elements in the array and the integer x.

Second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 105) — the elements of the array.

Output Format:
Print a single integer: the answer to the problem.

Note:
In the first sample there is only one pair of i = 1 and j = 2. $$a_{1} \oplus a_{2} = 3 = x$$ so the answer is 1.

In the second sample the only two pairs are i = 3, j = 4 (since $$2 \oplus 3 = 1$$) and i = 1, j = 5 (since $$5 \oplus 4 = 1$$).

A bitwise xor takes two bit integers of equal length and performs the logical xor operation on each pair of corresponding bits. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1. You can read more about bitwise xor operation here: https://en.wikipedia.org/wiki/Bitwise_operation#XOR.