package main

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"strings"
)

type testCase struct {
	input  string
	expect string
}

var positive = []string{
	// first 100 magic numbers <= 1e9
	"1", "11", "14", "111", "114", "141", "144", "1111", "1114", "1141", "1144", "1411", "1414", "1441",
	"11111", "11114", "11141", "11144", "11411", "11414", "11441", "14111", "14114", "14141", "14144",
	"14411", "14414", "111114", "111141", "111144", "111411", "111414", "111441", "114111", "114114",
	"114141", "114144", "114411", "114414", "141111", "141114", "141141", "141144", "141411", "141414",
	"141441", "144111", "144114", "144141", "144144", "1111144", "1111414", "1111441", "1114114",
	"1114141", "1114144", "1114411", "1114414", "1141114", "1141141", "1141144", "1141411",
	"1141414", "1141441", "1144111", "1144114", "1144141", "1144144", "1411114", "1411141",
	"1411144", "1411411", "1411414", "1411441", "1414111", "1414114", "1414141", "1414144",
	"1414411", "1414414", "1441111", "1441114", "1441141", "1441144", "1441411", "1441414",
	"1441441", "11114144", "11114414", "11141144", "11141414", "11141441", "11144114",
	"11144141", "11144144", "11411144", "11411414", "11411441", "11414114", "11414141",
}

var negative = []string{
	"906691060", "413654000", "813847340", "955892129", "451585302", "43469774", "278009743",
	"548977049", "521760890", "434794719", "830095180", "395570244", "927277034", "758085457",
	"421348467", "810785532", "229442086", "809010741", "767075147", "373094475", "304907063",
	"374513363", "706892880", "580325498", "488899430", "654821447", "849952933", "858585007",
	"459041016", "655861504", "570443566", "955516613", "726289638", "6985648", "108886889",
	"659987721", "649180285", "796904371", "801254687", "354176243", "75734032", "368254201",
	"169918830", "9327621", "401085266", "339092747", "808048962", "602886871", "452432510",
	"867768129", "313612479", "232468362", "246827195", "916218611", "655626427", "590972239",
	"284756548", "447252607", "846991248", "854395873", "352573400", "346196014", "723859733",
	"702890910", "356927051", "770098373", "833872925", "27867670", "387399138", "113167608",
	"463647686", "342653919", "2895229", "114612958", "636647471", "705878790", "52969870",
	"628476232", "707073147", "220511285", "820958054", "195603923", "498230282", "939943826",
	"178332816", "969397512", "165069657", "46259262", "370534557", "280048923", "780823064",
	"473117704", "509805003", "796614968", "642582941", "794867975", "439580426", "347659073",
	"15299699", "611155334",
}

func buildTests() []testCase {
	var tests []testCase
	for _, v := range positive {
		tests = append(tests, testCase{input: v, expect: "YES"})
	}
	for _, v := range negative {
		tests = append(tests, testCase{input: v, expect: "NO"})
	}
	return tests
}

func run(binary, input string) (string, error) {
	cmd := exec.Command(binary)
	cmd.Stdin = strings.NewReader(input + "\n")
	var out bytes.Buffer
	var stderr bytes.Buffer
	cmd.Stdout = &out
	cmd.Stderr = &stderr
	err := cmd.Run()
	if err != nil {
		return "", fmt.Errorf("run error: %v, stderr: %s", err, stderr.String())
	}
	return strings.TrimSpace(out.String()), nil
}

func main() {
	if len(os.Args) < 2 {
		fmt.Println("usage: go run verifierA.go /path/to/binary")
		os.Exit(1)
	}
	binary := os.Args[1]
	tests := buildTests()
	for i, t := range tests {
		got, err := run(binary, t.input)
		if err != nil {
			fmt.Printf("test %d failed: %v\n", i+1, err)
			os.Exit(1)
		}
		if got != t.expect {
			fmt.Printf("test %d failed: input %s expected %s got %s\n", i+1, t.input, t.expect, got)
			os.Exit(1)
		}
	}
	fmt.Printf("ok %d\n", len(tests))
}
