#include <bits/stdc++.h>
#define ms(a, b) memset(a, b, sizeof a)
using namespace std;
#define ll long long
const int N = 1e5 + 100;

struct node {
    ll now;
    ll x, y;
    ll shu;
    bool flag;
    node(){};
    node(ll now, ll x, ll y, ll shu, bool flag) : now(now), x(x), y(y), shu(shu), flag(flag) {};
    bool operator<(const node &t1) const{
         return (now < t1.now);
    }
};
ll n, m, r, k;

ll get(ll x, ll y) {
    ll lx = max(1ll, x - r + 1);
    ll ly = max(1ll, y - r + 1);
    x = min(x, n - r + 1);
    y = min(y, m - r + 1);
    // cout << lx << ' ' << ly << ' ' << x << ' ' << y << endl;
    return 1ll * (x - lx + 1) * (y - ly + 1);
}
priority_queue<node>q;
int main(void) {
    cin >> n >> m >> r >> k;
    ll number = (n-r+1) * (m-r+1);
    ll MAX = get((n+1)>>1, (m+1)>>1);
    ll a, b;
    if(n >= 2 * r) a = n - 2 * r + 2;
    else a = 2*r - n ;
    if(m >= 2 * r) b = m - 2 * r + 2;
    else b = 2*r - m ;
    //cout << number<< endl;
   // cout << a << "  " << b<<endl;
    ll hen = min(n-r+1, r), shu = min(m-r+1, r);
      //  cout << hen << " " << shu << endl;
    ll ans = 0;

    q.push(node(MAX, a, b, shu, 1));
    while(1) {
        node p = q.top();
        q.pop();
        //cout << p.now <<"   "<< k << endl;;
        if(p.x * p.y >= k) {
            ll les = min(p.x * p.y, k);
            ans += p.now * les;
            break;
        }
        else {
            //out << p.x << "  " << p.y << endl;
            k -= p.x * p.y;
            ans += p.x * p.y * p.now;
            if(p.now-hen >= 1 && p.flag)
                q.push(node(p.now-hen, p.x, 2, p.shu-1, 1));

            if(p.now-p.shu >= 1)
                q.push(node(p.now-p.shu, 2, p.y, p.shu, 0));
        }
        //cout << ans << "  ---  " << k << endl;

    }
    //cout << ans << endl;
    printf("%.15f", 1.*ans/number);


    return 0;
}
/*
1,2,3,4,5,6,7,8,9,10,10,9,8,7,6,5,4,3,2,1,
2,4,6,8,10,12,14,16,18,20,20,18,16,14,12,10,8,6,4,2,
3,6,9,12,15,18,21,24,27,30,30,27,24,21,18,15,12,9,6,3,
4,8,12,16,20,24,28,32,36,40,40,36,32,28,24,20,16,12,8,4,
5,10,15,20,25,30,35,40,45,50,50,45,40,35,30,25,20,15,10,5,
6,12,18,24,30,36,42,48,54,60,60,54,48,42,36,30,24,18,12,6,
7,14,21,28,35,42,49,56,63,70,70,63,56,49,42,35,28,21,14,7,
8,16,24,32,40,48,56,64,72,80,80,72,64,56,48,40,32,24,16,8,
9,18,27,36,45,54,63,72,81,90,90,81,72,63,54,45,36,27,18,9,
10,20,30,40,50,60,70,80,90,100,100,90,80,70,60,50,40,30,20,10,
10,20,30,40,50,60,70,80,90,100,100,90,80,70,60,50,40,30,20,10,
9,18,27,36,45,54,63,72,81,90,90,81,72,63,54,45,36,27,18,9,
8,16,24,32,40,48,56,64,72,80,80,72,64,56,48,40,32,24,16,8,
7,14,21,28,35,42,49,56,63,70,70,63,56,49,42,35,28,21,14,7,
6,12,18,24,30,36,42,48,54,60,60,54,48,42,36,30,24,18,12,6,
5,10,15,20,25,30,35,40,45,50,50,45,40,35,30,25,20,15,10,5,
4,8,12,16,20,24,28,32,36,40,40,36,32,28,24,20,16,12,8,4,
3,6,9,12,15,18,21,24,27,30,30,27,24,21,18,15,12,9,6,3,
2,4,6,8,10,12,14,16,18,20,20,18,16,14,12,10,8,6,4,2,
1,2,3,4,5,6,7,8,9,10,10,9,8,7,6,5,4,3,2,1,
*/